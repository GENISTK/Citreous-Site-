Development:
    Several tasks were already complete by time I created this todo so there may be a lot of missing tasks. I estimate
    that roughly 20% of the site is already complete.

    Repo: https://github.com/GENISTK/Citreous-Site-

    Priority Timeline
        @critical Few hours.
        @high One or two days.
        @medium one week.
        @low No real timeline.

    Note that this project is not on any real timeline so priority isn't very serious.

    Custom Development Tag's
        @medium for tasks that are not high, low, or critical.
        @temp for tasks that are being implemented with the knowledge that it will not be permenant
        @test for tasks that are implemented that are primarily being tested. 
        @unsure for tasks that I am unsure if I will actually implement or not.

    ☐ Create Monster Card Detail View @medium
        I want the Compendium component to change from a dashboard view to a details view. 
        Implementation Steps
            ✔ Show blank screen on click @done(18-11-16 19:30)
            ✔ Set monster id on click @done(18-11-16 19:30)
            ✔ Query db and get monster information based on id @done(18-11-16 19:30)
            ✔ Query db and get all owned monster cards of that id @done(18-11-16 19:30)
            ✔ Display monster name @done(18-11-16 19:30)
            ☐ Show horizontal list of owned monsters of that id
                by default have the highest level one selected
                I currently show cards but it is not in a horizontal scroll list. I downloaded a module to get
                started but I decided to stop dev for the day.
            ☐ (left-center) Show selected monster's unlocked duel cards
                If card is not unlocked yet, show a grayed out version of it.
            ☐ (right) show current duel loadout (Like Hearthstone)
            Save and revert button (don't push to database until save is pressed)
    ☐ Create git for site so that I can work on it from anywhere.
        It is sort of annoying that I can only work on this from my desktop even though it is all pretty lightweight.
        Should I add it to a KAT git or should I create my own for now? I will ask TM.
    ☐ Learn and implement best login practices
        We are eventually going to use Google/Apple login so this matters a little less. I still want to know the best way
        to verify and store userdata. Currently, once the user is verified, the username is stored in local storage which
        I don't high confidence in because I feel that someone could manually store a username and bypass the verification
        process. It might be better to add session id's that have to be generated and are difficult to mimick. 
    ☐ Look into forum possibilities.
        I want to implement our own forum but it might be more beneficial to just use some service to do it for us. One thing
        I am worried about is accedentially losing data and posts. I am also worried about the amount of dependence on our own 
        databases in general. AWS is an obvious solution but I am nervous because of the recent financial blunder.
        What we would have to store
            User
                handle
                number of posts
                reputation
                bio
                most popular posts?
            Posts
                Name
                CreatedDate
                LastEditedDate
                Content
                Creator
                Sticky?
                Views
                Comments
                    User
                    Content
                    Views
            Categories
                Name
                CreatedOn         
        There is probably more but I can't think of anything else atm.       
    ☐ Create an account settings page
        What would be displayed/changeable
            Disable Compendium (Will immediately log user out)
            All of forum related items
    ☐ Roadmap @unsure
        It might be nice to have a trello board or custom graph of planned features. If we announce our game before we have made it, we could
        get/keep people's attention by having an up-to-date roadmap.
    ☐ Database Update GUI @low 
        The database is very relational and it is kind of annoying to manual insert new data. It would be nice
        to have a gui that makes it easy to add new entries. Could be done with a temp page on site or I could just create a php
        page. The PHP page is probably better for security reasons. 
    ☐ Refactor code to meet security and design standards
        A lot of development has been using test/ad-hoc programming and I want to go back through and eventually make everything
        follow industrial standards. I care less about site structure and more about user information security and hacking attempts.
        Because the site is created with JavaScript, a lot of the site infrastructure is exposed so specail attention needs to 
        be given to the code. I may even need to encrypt the code with code decrypters.

        Extra attention should be given to pieces of code that interact with the backend. I don't want a user to so something
        I don't want by simply changing a line of JS. This means that the API should have restrictions and verifications. This
        goes back to session id's.

        It is worth noting that we will not be storing sensitive information. The most sensative information we will be is storing usernames/google id's. 
        I may forgo a forum specifically so that we don't have to store more user information.

        I did some research and found security standards that should be followed.
        https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d
            1. Use Linter Security rules: https://github.com/nodesecurity/eslint-plugin-security
            2. Limit concurrent requests using a middle ware (AWS will handle this for us)
            3. Don't store plain-text secrets in configuration files or source code.
            4. Prevent query injection vulnerabilities with ORM/ODM libraries.
            5. Set when processes should crash to avoid DOSattacks
            6. Adjust HTTP response headers for enhanced security
            7. Use tools like npm audit to detect vulnerable dependencies
            8. Avoid using Node.js crypto library for passwords, use Bcrypt
            9. Escape HTML, JS, and CSS output
            10. Validate incoming JSON schemas
            11. Support blacklisting JWT tokens
            6.12. Limit the allwoed login requests of each user (We are going to use Google/Apple login)
            13. Run Node.js as a non-root user
            14. Limit payload size using a reverse-proxy or a middleware
            15. Avoid JavaScript eval statements
            16. Prevent evil RegEx from overloading your single thread execution
            17. Avoid module loading using a variable
            18. Run unsafe code in a sandbox
            19. Take extra care when working with child processes
            20. Hide error details from clients
            21. Configure 2FA for npm or Yarn (again login will be handled)
            22. Modify session middleware settings
            23. A list of 40 generic security advice (see list)

Community: 
    These are tasks related to blogs, forums posts, news, events, etc.. 

    ☐ Create dev blog that outline goals, inspirations, and intentions. 
    ☐ Create event for designing your own monster  
        This will require creating clear documentation on monster types
        We would also need to outline rules and limits for monster designs (i.e. no invinciable, all powerful, monster.)

Archive:
  ✔ Learn to correctly work with variables in REACT.js @medium @done(18-11-16 19:29) @project(Development)
    At this point I am using a combination of global variables (within classes), and this.state. I was lead to believe 
    that this.state was the best way to store and retrieve "global variables"; however, whenever you need to update just
    one property in the state, you have re-define the whole state. This means I need to have global variables which
    (in my opinoin) elminates the purpose of state. I need to learn more about what is standard. 
  ✔ Get compendium filter to work @today @high @done(18-11-16 19:26) @lasted(46s) @project(Development)
    This is already sort of done I just need to work out kinks with the setState statements.
